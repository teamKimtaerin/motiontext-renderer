/**
 * MotionText Renderer Demo Application
 */

import { MotionTextRenderer } from '../src/index';
import type { RendererConfig } from '../src/types';

// DOM Elements
const video = document.getElementById('demo-video') as HTMLVideoElement;
const captionContainer = document.getElementById('caption-container') as HTMLElement;
const sampleSelector = document.getElementById('sample-selector') as HTMLSelectElement;
const loadSampleBtn = document.getElementById('load-sample') as HTMLButtonElement;
const playBtn = document.getElementById('play-btn') as HTMLButtonElement;
const pauseBtn = document.getElementById('pause-btn') as HTMLButtonElement;
const resetBtn = document.getElementById('reset-btn') as HTMLButtonElement;
const configEditor = document.getElementById('config-editor') as HTMLTextAreaElement;
const applyConfigBtn = document.getElementById('apply-config') as HTMLButtonElement;
const resetConfigBtn = document.getElementById('reset-config') as HTMLButtonElement;

// Status displays
const rendererStatus = document.getElementById('renderer-status') as HTMLSpanElement;
const currentTime = document.getElementById('current-time') as HTMLSpanElement;
const activeCues = document.getElementById('active-cues') as HTMLSpanElement;

// Application state
let renderer: MotionTextRenderer | null = null;
let currentConfig: RendererConfig | null = null;

// Sample configurations
const sampleConfigs: Record<string, RendererConfig> = {
  basic: {
    version: '1.3',
    timebase: { unit: 'seconds' },
    stage: { baseAspect: '16:9' },
    tracks: [
      {
        id: 'subtitle',
        type: 'subtitle',
        layer: 1,
      },
    ],
    cues: [
      {
        id: 'cue1',
        track: 'subtitle',
        hintTime: 2,
        root: {
          id: 'group1',
          type: 'group',
          children: [
            {
              id: 'text1',
              type: 'text',
              absStart: 2,
              absEnd: 5,
              content: 'ÏïàÎÖïÌïòÏÑ∏Ïöî! MotionText RendererÏûÖÎãàÎã§.',
              layout: {
                position: [0.5, 0.85],
              },
            },
          ],
        },
      },
      {
        id: 'cue2',
        track: 'subtitle',
        hintTime: 6,
        root: {
          id: 'group2',
          type: 'group',
          children: [
            {
              id: 'text2',
              type: 'text',
              absStart: 6,
              absEnd: 9,
              content: 'Ïù¥Í≤ÉÏùÄ Í∏∞Î≥∏ ÏûêÎßâ ÌÖåÏä§Ìä∏ÏûÖÎãàÎã§.',
              layout: {
                position: [0.5, 0.85],
              },
            },
          ],
        },
      },
    ],
  },

  animated: {
    version: '1.3',
    timebase: { unit: 'seconds' },
    stage: { baseAspect: '16:9' },
    tracks: [
      {
        id: 'title',
        type: 'free',
        layer: 2,
      },
      {
        id: 'subtitle',
        type: 'subtitle',
        layer: 1,
      },
    ],
    cues: [
      {
        id: 'title-cue',
        track: 'title',
        hintTime: 1,
        root: {
          id: 'title-group',
          type: 'group',
          children: [
            {
              id: 'title-text',
              type: 'text',
              absStart: 1,
              absEnd: 4,
              content: 'üé¨ Ïï†ÎãàÎ©îÏù¥ÏÖò ÌÖåÏä§Ìä∏',
              layout: {
                position: [0.5, 0.2],
              },
            },
          ],
        },
      },
      {
        id: 'subtitle-cue',
        track: 'subtitle',
        hintTime: 4,
        root: {
          id: 'subtitle-group',
          type: 'group',
          children: [
            {
              id: 'subtitle-text',
              type: 'text',
              absStart: 4,
              absEnd: 8,
              content: 'Îã§ÏñëÌïú Ïï†ÎãàÎ©îÏù¥ÏÖò Ìö®Í≥ºÎ•º ÏßÄÏõêÌï©ÎãàÎã§',
              layout: {
                position: [0.5, 0.8],
              },
            },
          ],
        },
      },
    ],
  },

  plugin: {
    version: '1.3',
    timebase: { unit: 'seconds' },
    stage: { baseAspect: '16:9' },
    tracks: [
      {
        id: 'effect',
        type: 'free',
        layer: 3,
      },
    ],
    cues: [
      {
        id: 'plugin-cue',
        track: 'effect',
        hintTime: 2,
        root: {
          id: 'plugin-group',
          type: 'group',
          children: [
            {
              id: 'plugin-text',
              type: 'text',
              absStart: 2,
              absEnd: 6,
              content: 'ÌîåÎü¨Í∑∏Ïù∏ ÏãúÏä§ÌÖú ÌÖåÏä§Ìä∏',
              layout: {
                position: [0.5, 0.5],
              },
            },
          ],
        },
      },
    ],
  },
};

// Initialize demo application
function initDemo() {
  updateStatus('Î†åÎçîÎü¨ Ï§ÄÎπÑÎê®');
  
  // Set up video time update
  video.addEventListener('timeupdate', () => {
    currentTime.textContent = `${video.currentTime.toFixed(2)}s`;
  });

  // Set up event listeners
  loadSampleBtn.addEventListener('click', loadSelectedSample);
  playBtn.addEventListener('click', () => {
    video.play();
    if (renderer) renderer.play();
  });
  pauseBtn.addEventListener('click', () => {
    video.pause();
    if (renderer) renderer.pause();
  });
  resetBtn.addEventListener('click', resetDemo);
  applyConfigBtn.addEventListener('click', applyConfig);
  resetConfigBtn.addEventListener('click', resetConfig);

  console.log('‚úÖ MotionText Renderer Demo Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
}

// Load selected sample configuration
function loadSelectedSample() {
  const selectedSample = sampleSelector.value;
  if (!selectedSample || !sampleConfigs[selectedSample]) {
    alert('ÏÉòÌîåÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.');
    return;
  }

  const config = sampleConfigs[selectedSample];
  loadConfiguration(config);
}

// Load configuration into renderer
async function loadConfiguration(config: RendererConfig) {
  try {
    // Display JSON in editor
    configEditor.value = JSON.stringify(config, null, 2);
    currentConfig = config;

    // Initialize renderer if not exists
    if (!renderer) {
      renderer = new MotionTextRenderer(captionContainer);
      updateStatus('Î†åÎçîÎü¨ Ï¥àÍ∏∞ÌôîÎê®');
    }

    // Load configuration
    await renderer.loadConfig(config);
    renderer.attachMedia(video);

    updateStatus('ÏÑ§Ï†ï Î°úÎìú ÏôÑÎ£å');
    activeCues.textContent = config.cues.length.toString();

    console.log('‚úÖ ÏÑ§Ï†ï Î°úÎìú ÏôÑÎ£å:', config);
  } catch (error) {
    console.error('‚ùå ÏÑ§Ï†ï Î°úÎìú Ïã§Ìå®:', error);
    updateStatus('ÏÑ§Ï†ï Î°úÎìú Ïã§Ìå®');
    alert(`ÏÑ§Ï†ï Î°úÎìú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${error}`);
  }
}

// Apply configuration from editor
function applyConfig() {
  try {
    const configText = configEditor.value.trim();
    if (!configText) {
      alert('JSON ÏÑ§Ï†ïÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    const config = JSON.parse(configText) as RendererConfig;
    loadConfiguration(config);
  } catch (error) {
    console.error('‚ùå JSON ÌååÏã± Ïã§Ìå®:', error);
    alert('Ïò¨Î∞îÎ•∏ JSON ÌòïÏãùÏù¥ ÏïÑÎãôÎãàÎã§.');
  }
}

// Reset configuration
function resetConfig() {
  configEditor.value = '';
  currentConfig = null;
  updateStatus('ÏÑ§Ï†ï Ï¥àÍ∏∞ÌôîÎê®');
  activeCues.textContent = '0';
}

// Reset demo
function resetDemo() {
  video.currentTime = 0;
  video.pause();
  
  if (renderer) {
    renderer.seek(0);
    renderer.pause();
  }

  updateStatus('Îç∞Î™® Î¶¨ÏÖãÎê®');
}

// Update status display
function updateStatus(status: string) {
  rendererStatus.textContent = status;
  console.log('üìä ÏÉÅÌÉú:', status);
}

// Error handling
window.addEventListener('error', (event) => {
  console.error('‚ùå Ï†ÑÏó≠ Ïò§Î•ò:', event.error);
  updateStatus('Ïò§Î•ò Î∞úÏÉù');
});

// Initialize when page loads
document.addEventListener('DOMContentLoaded', initDemo);

// Export for debugging
(window as any).demoApp = {
  renderer,
  video,
  loadConfiguration,
  sampleConfigs,
};